package Act;

import java.util.Calendar;

public class Doc {
    private Student student = new Student();
    private static int counter = 0;
    private int numofDoc = ++counter;
    private Calendar dateOfCreating = Calendar.getInstance();
    private String characteristic = "The student does not have a characteristic";

    public Doc(String name, String faculty, int course, int yearofEnrollment){
        student = new Student(name,faculty,course,yearofEnrollment);
        if(course > Student.TRAINING_PERIOD){
            student.setStatus(StudentStatus.GRADUATED);
        }
    }

    public void changeFaculty(String faculty){
        if(student.getStatus() == StudentStatus.ENROLLED){
            student.setFaculty(faculty);
        }else{
            System.out.println("This is student is graduated or expelled ");
        }
    }

    public boolean incCourse(){
        if(student.getStatus() == StudentStatus.ENROLLED){
            if(!student.incCourse()){
                student.setStatus(StudentStatus.GRADUATED);
                return false;
            } else{
                return true;
            }
        } else{
            System.out.println("This is student is graduated or expelled ");
            return false;
        }
    }

    public void changeCourse(int course){
        if(student.getStatus() == StudentStatus.ENROLLED){
            student.setCourse(course);
        } else{
            System.out.println("This is student is graduated or expelled ");
        }
    }

    public void setCharacteristic(String characteristic){
        if(student.getStatus() == StudentStatus.ENROLLED){
            if(characteristic != null && !characteristic.isEmpty()){
                this.characteristic = characteristic;
            }
        } else{
            System.out.println("The student is graduated or expelled");
        }
    }

    public String getName(){
        return student.getName();
    }

    public String getFaculty(){
        return student.getFaculty();
    }

    public int getNumofDoc(){
        return numofDoc;
    }

    public int getCourse(){
        return student.getCourse();
    }

    public int getYearOfEnrollment(){
        return student.getYearOfEnrollment();
    }

    public StudentStatus getStatus(){
        return student.getStatus();
    }

    @Override
    public String toString(){
        String string = new String();
        string += "Created " + dateOfCreating.getTime().toString() + "\n";
        string += "Matter â„– " + numofDoc + "\n";
        string += "Name: " + student.getName() + "\n";
        string += "Faculty: " + student.getFaculty() + "\n";
        if(student.getStatus() == StudentStatus.ENROLLED){
            string += "Course: " + student.getCourse() + "\n";
        }
        string += "Year of enrollment: " + student.getYearOfEnrollment() + "\n";
        string += "Status: " + student.getStatus() + "\n";
        string += "Characteristic: \n" + characteristic + "\n";
        return string;
    }

    @Override
    public boolean equals(Object obj){
        if(obj == this){
            return true;
        }

        if(obj==null || obj.getClass() != this.getClass()){
            return false;
        }

        Doc other=(Doc) obj;

        return student.equals(other.student) && characteristic.equals(other.characteristic);
    }

    @Override
    public int hashCode(){
        final int prime=31;
        int result=1;

        result=prime*result+((characteristic==null)?0:characteristic.hashCode());
        result=prime*result+student.hashCode();

        return result;
    }
}
